---
title: "Sex Differences"
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-background: true
    code-tools: true
    code-fold: true
    code-block-border-left: true
execute:
  echo: true
  cache: true
  message: false
  warning: false
editor: source
---



```{r}
# load packages 
library(tidyverse)
library(gtsummary)
library(gt)
library(tidymodels)
library(censored)
library(paletteer)
library(survey)
library(patchwork)
theme_set(theme_light())
# paletteer_d("colorBlindness::PairedColor12Steps")
col1 = "#FF9932"; col2 = "#65CCFF"
col1 = "#CC5151"; col2 = "#422CB2"
# paletteer_d("ggthemes::colorblind")
col_vec = c("#000000FF", "#009E73FF", "#CC79A7FF", "#E69F00FF", "#D55E00FF", "#56B4E9FF", "#0072B2FF")

mvpa_subj = readRDS(here::here("data", "pa_covariates.rds"))
days = readRDS(here::here("data", "accelerometry", "inclusion_c_d.rds"))

wear = 
  days %>% 
  mutate(non_zero_vals = non_na_vals - zero_vals) %>% 
  filter(include_day) %>% 
  group_by(SEQN) %>% 
  summarize(wear_mins = mean(non_zero_vals)) %>% 
  mutate(SEQN = as.character(SEQN))
  
```

# Survey Weighted Physical Activity Summaries by Sex 

```{r}
df_small = mvpa_subj %>% 
  left_join(wear) %>% 
  filter(age_in_years_at_screening >= 18) %>%
  select(SEQN,
         data_release_cycle,
         gender,
         wear_mins,
         masked_variance_pseudo_psu,
         masked_variance_pseudo_stratum,
         full_sample_2_year_interview_weight,
         full_sample_2_year_mec_exam_weight,
         age_in_years_at_screening,
         total, 
         mean,
         mvpa, 
         mod,
         vig,
         mvpa_bout,
         vig_bout,
         contains("range")) 
labs = c("SEQN", "Data release cycle", "Gender",  "Wear minutes",
         "Pseudo PSU",
         "Psueudo stratum",
         "2 yr int weight", "2 yr exam weight",
         "Age", "Total AC", "Mean AC", "MVPA minutes",  "Moderate minutes", "Vigorous minutes",
         "MVPA (10 min bout)",
         "Vig (10 min bout)",
         "Time <500", "Time [500,1000]","Time (1000,1500]","Time (1500,2000]", "Time (2000,2500]", "Time (2500,3000]", "Time (3000,3500]", "Time (3500,4000]", "Time (4000,4500]", "Time (4500,5000]", "Time >5000") 

names(labs) = colnames(df_small)

df_small =
  df_small %>%
  labelled::set_variable_labels(!!!labs)

df_svy =
  df_small %>% 
  filter(age_in_years_at_screening >= 18) %>%
  select(SEQN,
         data_release_cycle,
         gender,
         wear_mins,
         masked_variance_pseudo_psu,
         masked_variance_pseudo_stratum,
         full_sample_2_year_interview_weight,
         full_sample_2_year_mec_exam_weight,
         age_in_years_at_screening,
         total, 
         mean,
         mvpa, 
         mod,
         vig,
         mvpa_bout,
         vig_bout,
         contains("range")) %>% 
  mutate(WTMEC4YR = full_sample_2_year_mec_exam_weight/2,
         WTMEC4YR_norm = WTMEC4YR/mean(WTMEC4YR, na.rm = TRUE)) %>%
  svydesign(ids = ~masked_variance_pseudo_psu, weights = ~WTMEC4YR_norm,
            strata = ~masked_variance_pseudo_stratum, data=., nest=TRUE)

# survey weighted table
df_svy %>%
  tbl_svysummary(
    by = gender,
    include = -c(SEQN, data_release_cycle, masked_variance_pseudo_psu, masked_variance_pseudo_stratum, full_sample_2_year_interview_weight, full_sample_2_year_mec_exam_weight, WTMEC4YR, WTMEC4YR_norm),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 0,
    missing_text = "Missing",
  ) %>%
  add_overall() %>%
  add_p()

```

## Stratified by wave 

::: {.panel-tabset}

### 2003-2004

```{r}
df_svy =
  df_small %>% 
  filter(age_in_years_at_screening >= 18 & data_release_cycle == 3) %>%
  select(SEQN,
         data_release_cycle,
         gender,
         wear_mins,
         masked_variance_pseudo_psu,
         masked_variance_pseudo_stratum,
         full_sample_2_year_interview_weight,
         full_sample_2_year_mec_exam_weight,
         age_in_years_at_screening,
         total, 
         mean,
         mvpa, 
         mod,
         vig,
         mvpa_bout,
         vig_bout,
         contains("range")) %>% 
  mutate(WTMEC4YR = full_sample_2_year_mec_exam_weight/2,
         WTMEC4YR_norm = WTMEC4YR/mean(WTMEC4YR, na.rm = TRUE)) %>%
  svydesign(ids = ~masked_variance_pseudo_psu, weights = ~WTMEC4YR_norm,
            strata = ~masked_variance_pseudo_stratum, data=., nest=TRUE)

# survey weighted table
df_svy %>%
  tbl_svysummary(
    by = gender,
    include = -c(SEQN, data_release_cycle, masked_variance_pseudo_psu, masked_variance_pseudo_stratum, full_sample_2_year_interview_weight, full_sample_2_year_mec_exam_weight, WTMEC4YR, WTMEC4YR_norm),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 0,
    missing_text = "Missing",
  ) %>%
  add_overall() %>%
  add_p()
```

### 2005-2006

```{r}
df_svy =
  df_small %>% 
  filter(age_in_years_at_screening >= 18 & data_release_cycle == 4) %>%
  select(SEQN,
         data_release_cycle,
         wear_mins,
         gender,
         masked_variance_pseudo_psu,
         masked_variance_pseudo_stratum,
         full_sample_2_year_interview_weight,
         full_sample_2_year_mec_exam_weight,
         age_in_years_at_screening,
         total, 
         mean,
         mvpa, 
         mod,
         vig,
         mvpa_bout,
         vig_bout,
         contains("range")) %>% 
  mutate(WTMEC4YR = full_sample_2_year_mec_exam_weight/2,
         WTMEC4YR_norm = WTMEC4YR/mean(WTMEC4YR, na.rm = TRUE)) %>%
  svydesign(ids = ~masked_variance_pseudo_psu, weights = ~WTMEC4YR_norm,
            strata = ~masked_variance_pseudo_stratum, data=., nest=TRUE)

# survey weighted table
df_svy %>%
  tbl_svysummary(
    by = gender,
    include = -c(SEQN, data_release_cycle, masked_variance_pseudo_psu, masked_variance_pseudo_stratum, full_sample_2_year_interview_weight, full_sample_2_year_mec_exam_weight, WTMEC4YR, WTMEC4YR_norm),
    statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 0,
    missing_text = "Missing",
  ) %>%
  add_overall() %>%
  add_p()

```
::: 

# Survey-Weighted Physical Activity Summaries by Sex and Age 

```{r}
survey_design =
  df_small %>%
  filter(age_in_years_at_screening >= 18) %>%
  mutate(age_cat = cut(age_in_years_at_screening,
                       breaks=c(18, 30, seq(40, 80, 10)))) %>%
  mutate(weight = full_sample_2_year_mec_exam_weight / 2,
         weight_norm = weight / mean(weight)) %>%
  ungroup()  %>%
  survey::svydesign(
    id = ~ masked_variance_pseudo_psu,
    strata = ~ masked_variance_pseudo_stratum,
    weights = ~ weight_norm,
    data = .,
    nest = TRUE
  )

calc_by_age =
  function(var, df) {
    formula = as.formula(paste("~", var))
    total_by_age_gender = svyby(formula,
                                ~ age_cat + gender,
                                df,
                                svymean) %>%
      rename(mean = contains(var)) %>%
      mutate(metric = var)
  }

means_df =
  map_dfr(.x = mvpa_subj %>% select(contains("bout"), contains("range"), total, mean, mvpa, mod, vig) %>% colnames(),
          .f = calc_by_age, df = survey_design)


small = 
  means_df %>%
  pivot_wider(names_from = gender, values_from = c(mean, se)) %>% 
  mutate(val_female = paste0(round(mean_Female), " (", round(mean_Female - 1.96 * se_Female), ",", round(mean_Female + 1.96 * se_Female), ")"),
         val_male = paste0(round(mean_Male), " (", round(mean_Male - 1.96 * se_Female), ",", round(mean_Male + 1.96 * se_Male), ")"))

# test = svyttest(mvpa_montoye ~ gender, survey_design)
pvals = c()
for(i in 1:nrow(small)){
  row = means_df[i,]
  cat = row$age_cat
  var = row$metric
  survey_design =
    df_small %>%
    filter(age_in_years_at_screening >= 18) %>%
    mutate(age_cat = cut(age_in_years_at_screening,
                         breaks=c(18, 30, seq(40, 80, 10)))) %>%
    filter(age_cat == cat) %>%
    mutate(weight = full_sample_2_year_mec_exam_weight / 2,
           weight_norm = weight / mean(weight)) %>%
    ungroup()  %>%
    survey::svydesign(
      id = ~ masked_variance_pseudo_psu,
      strata = ~ masked_variance_pseudo_stratum,
      weights = ~ weight_norm,
      data = .,
      nest = TRUE
    )
  formula = as.formula(paste(var,  "~ gender"))
  test = svyttest(formula, survey_design)
  pvals = append(pvals, unname(test$p.value))
}

small %>% 
  select(metric, age_cat, Female = val_female, Male = val_male, mean_Female, mean_Male) %>% 
  bind_cols(p = pvals) %>% 
  mutate(pval = if_else(p < 0.001, "<0.001", format.pval(p, digits = 2))) %>% 
  # mutate(metric = factor(metric, 
  #                        labels = c("MVPA (min)", 
  #                                   "VPA (min)", "Time <1000",
  #                                   "Time [1000,2000]", "Time (2000,3000]", "Time (3000,4000]", "Time (4000,5000]", "Time (5000,6000]", "Time (6000,7000]", "Time (7000,8000]", "Time (8000,9000]", "Time >9000", "Total AC", "Mean AC", "Total MIMS"))) %>% 
  group_by(metric) %>% 
  gt() %>% 
  cols_hide(c("mean_Female", "mean_Male", "p")) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightpink"),
    locations = cells_body(
      rows = mean_Female > mean_Male & p < 0.05
    )
  ) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      rows = mean_Female < mean_Male & p < 0.05
    )
  )
  


```

## Stratified by wave 


::: {.panel-tabset}

### 2003-2004

```{r}
survey_design =
  df_small %>%
  filter(age_in_years_at_screening >= 18 & data_release_cycle == 3) %>%
  mutate(age_cat = cut(age_in_years_at_screening,
                       breaks=c(18, 30, seq(40, 80, 10)))) %>%
  mutate(weight = full_sample_2_year_mec_exam_weight / 2,
         weight_norm = weight / mean(weight)) %>%
  ungroup()  %>%
  survey::svydesign(
    id = ~ masked_variance_pseudo_psu,
    strata = ~ masked_variance_pseudo_stratum,
    weights = ~ weight_norm,
    data = .,
    nest = TRUE
  )

calc_by_age =
  function(var, df) {
    formula = as.formula(paste("~", var))
    total_by_age_gender = svyby(formula,
                                ~ age_cat + gender,
                                df,
                                svymean) %>%
      rename(mean = contains(var)) %>%
      mutate(metric = var)
  }

means_df =
  map_dfr(.x = mvpa_subj %>% select(contains("bout"), contains("range"), total, mean, mvpa, mod, vig) %>% colnames(),
          .f = calc_by_age, df = survey_design)


small = 
  means_df %>%
  pivot_wider(names_from = gender, values_from = c(mean, se)) %>% 
  mutate(val_female = paste0(round(mean_Female), " (", round(mean_Female - 1.96 * se_Female), ",", round(mean_Female + 1.96 * se_Female), ")"),
         val_male = paste0(round(mean_Male), " (", round(mean_Male - 1.96 * se_Female), ",", round(mean_Male + 1.96 * se_Male), ")"))

# test = svyttest(mvpa_montoye ~ gender, survey_design)
pvals = c()
for(i in 1:nrow(small)){
  row = means_df[i,]
  cat = row$age_cat
  var = row$metric
  survey_design =
    df_small %>%
    filter(age_in_years_at_screening >= 18) %>%
    mutate(age_cat = cut(age_in_years_at_screening,
                         breaks=c(18, 30, seq(40, 80, 10)))) %>%
    filter(age_cat == cat) %>%
    mutate(weight = full_sample_2_year_mec_exam_weight / 2,
           weight_norm = weight / mean(weight)) %>%
    ungroup()  %>%
    survey::svydesign(
      id = ~ masked_variance_pseudo_psu,
      strata = ~ masked_variance_pseudo_stratum,
      weights = ~ weight_norm,
      data = .,
      nest = TRUE
    )
  formula = as.formula(paste(var,  "~ gender"))
  test = svyttest(formula, survey_design)
  pvals = append(pvals, unname(test$p.value))
}

small %>% 
  select(metric, age_cat, Female = val_female, Male = val_male, mean_Female, mean_Male) %>% 
  bind_cols(p = pvals) %>% 
  mutate(pval = if_else(p < 0.001, "<0.001", format.pval(p, digits = 2))) %>% 
  # mutate(metric = factor(metric, 
  #                        labels = c("MVPA (min)", 
  #                                   "VPA (min)", "Time <1000",
  #                                   "Time [1000,2000]", "Time (2000,3000]", "Time (3000,4000]", "Time (4000,5000]", "Time (5000,6000]", "Time (6000,7000]", "Time (7000,8000]", "Time (8000,9000]", "Time >9000", "Total AC", "Mean AC", "Total MIMS"))) %>% 
  group_by(metric) %>% 
  gt() %>% 
  cols_hide(c("mean_Female", "mean_Male", "p")) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightpink"),
    locations = cells_body(
      rows = mean_Female > mean_Male & p < 0.05
    )
  ) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      rows = mean_Female < mean_Male & p < 0.05
    )
  )
  


```

### 2005-2006

```{r}
survey_design =
  df_small %>%
  filter(age_in_years_at_screening >= 18 & data_release_cycle == 4) %>%
  mutate(age_cat = cut(age_in_years_at_screening,
                       breaks=c(18, 30, seq(40, 80, 10)))) %>%
  mutate(weight = full_sample_2_year_mec_exam_weight / 2,
         weight_norm = weight / mean(weight)) %>%
  ungroup()  %>%
  survey::svydesign(
    id = ~ masked_variance_pseudo_psu,
    strata = ~ masked_variance_pseudo_stratum,
    weights = ~ weight_norm,
    data = .,
    nest = TRUE
  )

calc_by_age =
  function(var, df) {
    formula = as.formula(paste("~", var))
    total_by_age_gender = svyby(formula,
                                ~ age_cat + gender,
                                df,
                                svymean) %>%
      rename(mean = contains(var)) %>%
      mutate(metric = var)
  }

means_df =
  map_dfr(.x = mvpa_subj %>% select(contains("bout"), contains("range"), total, mean, mvpa, mod, vig) %>% colnames(),
          .f = calc_by_age, df = survey_design)


small = 
  means_df %>%
  pivot_wider(names_from = gender, values_from = c(mean, se)) %>% 
  mutate(val_female = paste0(round(mean_Female), " (", round(mean_Female - 1.96 * se_Female), ",", round(mean_Female + 1.96 * se_Female), ")"),
         val_male = paste0(round(mean_Male), " (", round(mean_Male - 1.96 * se_Female), ",", round(mean_Male + 1.96 * se_Male), ")"))

# test = svyttest(mvpa_montoye ~ gender, survey_design)
pvals = c()
for(i in 1:nrow(small)){
  row = means_df[i,]
  cat = row$age_cat
  var = row$metric
  survey_design =
    df_small %>%
    filter(age_in_years_at_screening >= 18) %>%
    mutate(age_cat = cut(age_in_years_at_screening,
                         breaks=c(18, 30, seq(40, 80, 10)))) %>%
    filter(age_cat == cat) %>%
    mutate(weight = full_sample_2_year_mec_exam_weight / 2,
           weight_norm = weight / mean(weight)) %>%
    ungroup()  %>%
    survey::svydesign(
      id = ~ masked_variance_pseudo_psu,
      strata = ~ masked_variance_pseudo_stratum,
      weights = ~ weight_norm,
      data = .,
      nest = TRUE
    )
  formula = as.formula(paste(var,  "~ gender"))
  test = svyttest(formula, survey_design)
  pvals = append(pvals, unname(test$p.value))
}

small %>% 
  select(metric, age_cat, Female = val_female, Male = val_male, mean_Female, mean_Male) %>% 
  bind_cols(p = pvals) %>% 
  mutate(pval = if_else(p < 0.001, "<0.001", format.pval(p, digits = 2))) %>% 
  # mutate(metric = factor(metric, 
  #                        labels = c("MVPA (min)", 
  #                                   "VPA (min)", "Time <1000",
  #                                   "Time [1000,2000]", "Time (2000,3000]", "Time (3000,4000]", "Time (4000,5000]", "Time (5000,6000]", "Time (6000,7000]", "Time (7000,8000]", "Time (8000,9000]", "Time >9000", "Total AC", "Mean AC", "Total MIMS"))) %>% 
  group_by(metric) %>% 
  gt() %>% 
  cols_hide(c("mean_Female", "mean_Male", "p")) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightpink"),
    locations = cells_body(
      rows = mean_Female > mean_Male & p < 0.05
    )
  ) %>% 
  tab_style(
    # Style to apply when conditions are met
    style = cell_fill(color = "lightblue"),
    locations = cells_body(
      rows = mean_Female < mean_Male & p < 0.05
    )
  )
  



```

:::

# Plots 

## Distributions

```{r}
mvpa_subj %>% 
  filter(age_in_years_at_screening >= 18) %>% 
  pivot_longer(cols = c(mvpa, mvpa_bout, vig, vig_bout, mean)) %>% 
  ggplot(aes(x = value, color = gender)) + 
  geom_density() + 
  facet_wrap(.~name, scales = "free") + 
  scale_color_manual(values = c(col1, col2), name = "")+
  theme(legend.position = c(0.9, 0.2))

```
We see that the data are very highly skewed, so we can Winsorize at the 99th percentile: 

```{r}
mvpa_subj_win = 
  mvpa_subj %>% 
  filter(age_in_years_at_screening >= 18) %>% 
  mutate(across(c(mvpa, mod, vig, mean, total, mvpa_bout, vig_bout),
                ~DescTools::Winsorize(.x, quantile(.x, probs = c(0, 0.99)))))

mvpa_subj_win %>% 
  pivot_longer(cols = c(mvpa, mvpa_bout, vig, vig_bout, mean)) %>% 
  ggplot(aes(x = value, color = gender)) + 
  geom_density() + 
  facet_wrap(.~name, scales = "free") + 
  scale_color_manual(values = c(col1, col2), name = "")+
  theme(legend.position = c(0.9, 0.2))

```

## Smoothed, unweighted 


```{r}

mvpa_subj_win %>%
  filter(age_in_years_at_screening >= 18) %>%
  pivot_longer(cols = contains("bout")) %>% 
  mutate(name = factor(name, labels = c("MVPA Bout", "VPA Bout"))) %>% 
  ggplot(aes(x = age_in_years_at_screening, y = value, color = gender)) +
  geom_jitter(alpha = .1, size = .7, width = .25) +
  geom_smooth(se = F) +
  facet_grid(name~data_release_cycle, scales = "free_y") + 
  labs(x = "Age", y = "Minutes", color = "")+
  scale_color_manual(values = c(col1, col2)) +
  theme(legend.position = c(0.9, 0.9),
        legend.title = element_blank())



mvpa_subj_win %>%
  filter(age_in_years_at_screening >= 18) %>%
  pivot_longer(cols = c("mvpa", "vig", "mod")) %>% 
  mutate(name = factor(name, labels = c("Mod", "MVPA", "VPA"))) %>% 
  ggplot(aes(x = age_in_years_at_screening, y = value, color = gender)) +
  geom_jitter(alpha = .1, size = .7, width = .25) +
  geom_smooth(se = F) +
  facet_grid(name~data_release_cycle, scales = "free_y") + 
  labs(x = "Age", y = "Minutes", color = "")+
  scale_color_manual(values = c(col1, col2)) +
  theme(legend.position = c(0.9, 0.9),
        legend.title = element_blank())

```

## Smoothed, weighted 

```{r}
survey_design =
  df_small %>%
  mutate(across(c(mvpa, mod, vig, mean, total, contains("range"), mvpa_bout, vig_bout),
                ~DescTools::Winsorize(.x, quantile(.x, probs = c(0, 0.99))))) %>% 
  filter(age_in_years_at_screening >= 18) %>%
  mutate(weight = full_sample_2_year_mec_exam_weight / 2,
         weight_norm = weight / mean(weight)) %>%
  ungroup()  %>%
  survey::svydesign(
    id = ~ masked_variance_pseudo_psu,
    strata = ~ masked_variance_pseudo_stratum,
    weights = ~ weight_norm,
    data = .,
    nest = TRUE
  )


calc_by_age =
  function(var, df) {
    # var = "total_oaksteps"
    formula = as.formula(paste("~", var))
    total_by_age_gender = svyby(formula,
                                ~ age_in_years_at_screening + gender,
                                df,
                                svymean) %>%
      rename(mean = contains(var)) %>%
      mutate(metric = var)
  }

means_df =
  map_dfr(.x = mvpa_subj %>% select(contains("bout"), mvpa, mod, vig, mean, total) %>% colnames(),
          .f = calc_by_age, df = survey_design)

# get smooths for means and confidence intervals
models = means_df %>%
  mutate(lb = mean - 1.96 * se,
         ub = mean + 1.96 * se) %>%
  tidyr::nest(data = -c(metric, gender)) %>%
  dplyr::mutate(
    # Perform loess calculation on each group
    m = purrr::map(data, loess,
                   formula = mean ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_mean = purrr::map(m, `[[`, "fitted"),
    l = purrr::map(data, loess,
                   formula = lb ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_lb = purrr::map(l, `[[`, "fitted"),
    u = purrr::map(data, loess,
                   formula = ub ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_ub = purrr::map(u, `[[`, "fitted")
  )

# Apply fitted y's as a new column
results = models %>%
  dplyr::select(-m, -l, -u) %>%
  tidyr::unnest(cols = c(data, contains("fitted")))

results %>%
  # mutate(metric = factor(metric, labels = c("MVPA", "VPA"))) %>% 
    ggplot(aes(x = age_in_years_at_screening, y = fitted_mean,
             ymin = fitted_lb, ymax = fitted_ub, color = gender, fill = gender)) +
  facet_wrap(. ~ metric, scales = "free_y") +
  geom_line(linewidth = 1) +
  geom_ribbon(alpha = .2, linetype = 0) +
  theme_light() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        text =element_text(size = 14),
        strip.text = element_text(size = 12),
        panel.grid.minor = element_blank()) +
  labs(x = "Age (years)", y = "Mean Daily Minutes",
       title = "Smoothed survey weighted mean daily minutes by age ")+
  scale_x_continuous(breaks=seq(20,80,10)) +
  scale_y_continuous(breaks=seq(0,600,30)) + 
  scale_color_manual(values = c(col1, col2))+
  scale_fill_manual(values = c(col1, col2))

means_df =
  map_dfr(.x = mvpa_subj %>% select(contains("range")) %>% colnames(),
          .f = calc_by_age, df = survey_design)

# get smooths for means and confidence intervals
models = means_df %>%
  mutate(lb = mean - 1.96 * se,
         ub = mean + 1.96 * se) %>%
  tidyr::nest(data = -c(metric, gender)) %>%
  dplyr::mutate(
    # Perform loess calculation on each group
    m = purrr::map(data, loess,
                   formula = mean ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_mean = purrr::map(m, `[[`, "fitted"),
    l = purrr::map(data, loess,
                   formula = lb ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_lb = purrr::map(l, `[[`, "fitted"),
    u = purrr::map(data, loess,
                   formula = ub ~ age_in_years_at_screening, span = .75),
    # Retrieve the fitted values from each model
    fitted_ub = purrr::map(u, `[[`, "fitted")
  )

# Apply fitted y's as a new column
results = models %>%
  dplyr::select(-m, -l, -u) %>%
  tidyr::unnest(cols = c(data, contains("fitted")))

results %>%
  # mutate(metric = factor(metric, labels = c("<1000", "1000-2000", "2001-3000", "3001-4000", "4001-5000", "5001-6000", "6001-7000", "7001-8000", "8001-9000", ">9000"))) %>% 
    ggplot(aes(x = age_in_years_at_screening, y = fitted_mean,
             ymin = fitted_lb, ymax = fitted_ub, color = gender, fill = gender)) +
  facet_wrap(. ~ metric, scales = "free_y") +
  geom_line(linewidth = 1) +
  geom_ribbon(alpha = .2, linetype = 0) +
  theme_light() +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        text =element_text(size = 14),
        strip.text = element_text(size = 12),
        panel.grid.minor = element_blank()) +
  labs(x = "Age (years)", y = "Mean Daily Minutes",
       title = "Smoothed survey weighted mean daily minutes by age")+
  scale_x_continuous(breaks=seq(20,80,10)) +
  scale_color_manual(values = c(col1, col2))+
  scale_fill_manual(values = c(col1, col2))
```

